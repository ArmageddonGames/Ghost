// ghost.zh
// Version 2.9.0
// Use this for 2.55.0, and later versions of ZQuest

// See ghost_zh_docs/index.html for documentation.

//All User Settings
// Standard settings -----------------------------------------------------------

//Combo labels
// ("GH2SH1"); //Shadow 1x1
// ("GH2SH2"); //Shadow 2x2
// ("GH2Z"); //Z Axis
// ("GH2NMES"); //Enemy config
// ("GH2FFC"); //General FFC config

namespace ghost2
{
	zstruct cfg
	{
		//ghost2::cfg.data[]
		enum settingtypes
		{ 
			version, subversion, patch_version, 
			date_year, date_month, date_day, date_hour, date_minute,
			/*padding*/
			control_0, control_1, control_2, control_3, control_4, control_5, control_6, control_7,
			control_8, control_9, control_10, control_11, control_12, control_13, control_14, control_15,
			/*end padding*/
			cmbcfgSHADOW1X1_TILE, cmbcfgSHADOW1X1_CSET, cmbcfgSHADOW1X1_FRAMES, cmbcfgSHADOW1X1_ANIMSPD, 
			cmbcfgSHADOW1X1_TRANSLUCENT, cmbcfgSHADOW1X1_FLICKER, 
			
			cmbcfgSHADOW2X2_TILE, cmbcfgSHADOW2X2_CSET, cmbcfgSHADOW2X2_FRAMES, cmbcfgSHADOW2X2_ANIMSPD, 
			cmbcfgSHADOW2X2_TRANSLUCENT, cmbcfgSHADOW2X2_FLICKER, 
			
			settingDRAWOVERTHRESHOLD, settingGRAVITY, settingTERMVELOCITY, 
			settingSPAWNSPRITE, settingFAKEZ, settingFAKEWPNZ, settingENEMIESFLICKER,
			settingPREFERGHOSTSHADOWS,
			
			useffcMIN, useffcMAX, usenpcMIN, useNPCMAX,
			settingALWAYSUSEENEMYNAME, settingBLANKTILE, settingBLANKCMB,
			
			/*
			const int GH_DRAW_OVER_THRESHOLD = 32;
			const float GH_GRAVITY = 0.16;
			const float GH_TERMINAL_VELOCITY = 3.2;
			const int GH_SPAWN_SPRITE = 22; // Min: 0, Max: 255, Default: 22
			const int GH_FAKE_Z = 0; // 0 = No, 1 = Yes
			const int __GH_FAKE_EWEAPON_Z = 0; // 0 = No, 1 = Yes
			const int GH_ENEMIES_FLICKER = 0; // 0 = No, 1 = Yes
			const int GH_PREFER_GHOST_ZH_SHADOWS = 0; // 0 = No, 1 = Yes
			*/
			
			
			settingsLAST 
		};
		
		//Global array for configuratin data
		untyped data[settingsLAST];
		
		enum gamemiscvalues
		{
			gmGhost, gmLAST = 32;
		};
		
		enum settingflags
		{
			zaxisENEMY = 0x1, zaxisWPM = 0x2, setflgENEMIESFLICKER = 0x4, setflgGHOSTSHADOWS = 0x8, setflagLAST = 0x10
		};
		
		//Perhaps these should use combos, too for combodata values.
		
		/*
		void initZAxis()
		{
			data[settingFAKEZ] = ( (Game->Misc[gmGhost]&zaxisENEMY) ? 1 : 0 );
			data[settingFAKEWPNZ] = ( (Game->Misc[gmGhost]&zaxisWPM) ? 1 : 0 );
		}
		
		void initEnemySettings
		{
			data[settingENEMIESFLICKER] = ( (Game->Misc[gmGhost]&setflgENEMIESFLICKER) ? 1 : 0 );
			data[settingPREFERGHOSTSHADOWS] = ( (Game->Misc[gmGhost]&setflgGHOSTSHADOWS) ? 1 : 0 );
			
		}
		
		void initGravity()
		{
			data[settingDRAWOVERTHRESHOLD] = Game->Gravity[GR_SPRLAYER];
			data[settingGRAVITY] = Game->Gravity[GR_STRENGTH];
			data[settingTERMVELOCITY] = Game->Gravity[GR_TERMINALV];
		}
		*/
		
		enum zaxis
		{
			zaxisFAKEZ, zaxisFAKEWPNZ, zaxisLAST
		};
		
		enum enemysettings
		{
			nmesSPAWNSPRITE, nmesFLICKER = 0, nmesGHOSTSHADOWS, nmesUSENAME, nmesMIN = 0, nmesMAX, nmesLAST
		};
		
		//Initialises all ghost settings.
		void init()
		{
			initVersioninfo();
			initZAxis();
			initEnemySettings();
			initGravity();
			initShadows();
			initGraphics();
		}
		
		//Initialises the version of ghost at runtime for readback.
		void initVersioninfo()
		{
			
		}
		
		enum ffcsettings
		{
			fMIN, fMAX, fLAST
		};
		
		void initGraphics()
		{
			combdata tileinfo;
			int c = Game->GetCombo("GH2BTILE");
			if (c == -1 )
			{
				printf("Ghost v2.9.x Combo 'GH2BTILE' is not configured.\nAborting Initialisation.\n");
				return;
			}
			else tileinfo = Game->LoadComboData(c);
			combdata comboinfo;
			c = Game->GetCombo("GH2BCMB");
			if (c == -1 )
			{
				printf("Ghost v2.9.x Combo 'GH2BCMB' is not configured.\nAborting Initialisation.\n");
				return;
			}
			else comboinfo = Game->LoadComboData(c);
			config[settingBLANKTILE] = tileinfo->OriginalTile;
			config[settingBLANKCMB] = comboinfo->ID;
		}
		
		//Sets ghost ffc properties based off of one combo.
		void initFFCs()
		{
			combodata ffcinfo;
			int c = Game->GetCombo("GH2FFC");
			if (c == -1 )
			{
				printf("Ghost v2.9.x Combo 'GH2FFC' is not configured.\nAborting Initialisation.\n");
				return;
			}
			else ffcinfo = Game->LoadComboData(c);
			data[useffcMIN] = vbound(ffcinfo->Attribytes[fMIN], 1, 32);
			data[useffcMAX] = vbound(ffcinfo->Attribytes[fMIN], 1, 32);
			//useffcMIN, useffcMAX, usenpcMIN, useNPCMAX,
		}
		
		//Sets ghost Z-Axis behavioural properties based off of one combo.
		void initZAxis()
		{
			combodata zinfo;
			int c = Game->GetCombo("GH2Z");
			if (c == -1 )
			{
				printf("Ghost v2.9.x Combo 'GH2Z' is not configured.\nAborting Initialisation.\n");
				return;
			}
			else zinfo = Game->LoadComboData(c);
			data[settingFAKEZ] = ( (zinfo->Flags[zaxisFAKEZ]) ? 1 : 0 );
			data[settingFAKEWPNZ] = ( (zinfo->Flags[zaxisFAKEWPNZ]) ? 1 : 0 );
		}
		
		//Sets ghost enemy behavioural properties based off of one combo.
		void initEnemySettings()
		{
			combodata nmesinfo;
			int c = Game->GetCombo("GH2NMES");
			if (c == -1 )
			{
				printf("Ghost v2.9.x Combo 'GH2NMES' is not configured.\nAborting Initialisation.\n");
				return;
			}
			else nmesinfo = Game->LoadComboData(c);
			data[settingENEMIESFLICKER] = ( (nmesinfo->Flags[nmesFLICKER]) ? 1 : 0 );
			data[settingPREFERGHOSTSHADOWS] = ( (nmesinfo->Flags[nmesGHOSTSHADOWS]) ? 1 : 0 );
			data[settingSPAWNSPRITE] = nmesinfo->Attribytes[nmesSPAWNSPRITE];
			data[usenpcMIN] = nmesinfo->Attributes[nmesMIN]; 
			data[useNPCMAX] = nmesinfo->Attributes[nmesMAX];
			data[settingALWAYSUSEENEMYNAME] = nmesinfo->Flags[nmesUSENAME];
			
		}
		
		void initGravity()
		{
			data[settingDRAWOVERTHRESHOLD] = Game->Gravity[GR_SPRLAYER];
			data[settingGRAVITY] = Game->Gravity[GR_STRENGTH];
			data[settingTERMVELOCITY] = Game->Gravity[GR_TERMINALV];
		}
		
		void initShadows()
		{
			combodata shadow1x1;
			int c = Game->GetCombo("GH2SH1");
			if (c == -1 )
			{
				printf("Ghost v2.9.x Combo 'GH2SH1' is not configured.\nAborting Initialisation.\n");
				return;
			}
			else shadow1x1 = Game->LoadComboData(c);
			combodata shadow2x2;
			c = Game->GetCombo("GH2SH2");
			if (c == -1 )
			{
				printf("Ghost v2.9.x Combo 'GH2SH2' is not configured.\nAborting Initialisation.\n");
				return;
			}
			else shadow2x2 = Game->LoadComboData(c);
			data[cmbcfgSHADOW1X1_TILE] = shadow1x1->Tile;
			data[cmbcfgSHADOW2X2_TILE] = shadow2x2->Tile;
			
			data[cmbcfgSHADOW1X1_CSET] = shadow1x1->Attribytes[0];
			data[cmbcfgSHADOW1X1_CSET] = shadow2x2->Attribytes[0];
			
			data[cmbcfgSHADOW1X1_FRAMES] = shadow1x1->AFrames;
			data[cmbcfgSHADOW1X1_FRAMES] = shadow2x2->AFrames;
			
			data[cmbcfgSHADOW1X1_ANIMSPD] = shadow1x1->ASpeed;
			data[cmbcfgSHADOW2X2_ANIMSPD] = shadow2x2->ASpeed;
			
			data[cmbcfgSHADOW1X1_TRANSLUCENT] = ( (shadow1x1->Flags[0]) ? 1 : 0 );
			data[cmbcfgSHADOW2X2_TRANSLUCENT] = ( (shadow1x1->Flags[0]) ? 1 : 0 );
			
			data[cmbcfgSHADOW1X1_FLICKER] = ( (shadow1x1->Flags[1]) ? 1 : 0 );
			data[cmbcfgSHADOW2X2_FLICKER] = ( (shadow1x1->Flags[1]) ? 1 : 0 );
		}
	}
	
	/* Port these constants to the array indices
	
	// Small (1x1) shadow settings
	const int GH_SHADOW_TILE = 27400;
	const int GH_SHADOW_CSET = 7;
	const int GH_SHADOW_FRAMES = 4;
	const int GH_SHADOW_ANIM_SPEED = 8;
	const int GH_SHADOW_TRANSLUCENT = 1; // 0 = No, 1 = Yes
	const int GH_SHADOW_FLICKER = 0; // 0 = No, 1 = Yes

	// Large (2x2) shadow settings
	// If GH_LARGE_SHADOW_TILE is 0, large shadows will be disabled
	const int GH_LARGE_SHADOW_TILE = 27392; // Top-left corner
	const int GH_LARGE_SHADOW_CSET = 7;
	const int GH_LARGE_SHADOW_FRAMES = 4;
	const int GH_LARGE_SHADOW_ANIM_SPEED = 8;
	const int GH_LARGE_SHADOW_MIN_WIDTH = 3;  // Enemies must be at least this wide
	const int GH_LARGE_SHADOW_MIN_HEIGHT = 3; // and this high to use large shadows
	
	

	// AutoGhost settings
	const int AUTOGHOST_MIN_FFC = 1; // Min: 1, Max: 32
	const int AUTOGHOST_MAX_FFC = 32; // Min: 1, Max: 32
	const int AUTOGHOST_MIN_ENEMY_ID = 20; // Min: 20, Max: 511
	const int AUTOGHOST_MAX_ENEMY_ID = 511; // Min: 20, Max: 511

	// Other settings
	const int GH_DRAW_OVER_THRESHOLD = 32;
	const float GH_GRAVITY = 0.16;
	const float GH_TERMINAL_VELOCITY = 3.2;
	const int GH_SPAWN_SPRITE = 22; // Min: 0, Max: 255, Default: 22
	const int GH_FAKE_Z = 0; // 0 = No, 1 = Yes
	const int __GH_FAKE_EWEAPON_Z = 0; // 0 = No, 1 = Yes
	const int GH_ENEMIES_FLICKER = 0; // 0 = No, 1 = Yes
	const int GH_PREFER_GHOST_ZH_SHADOWS = 0; // 0 = No, 1 = Yes
	

	// Top-left corner of a 4x4 block of blank tiles
	const int GH_BLANK_TILE = 65456; // Min: 0, Max: 65456

	// Invisible combo with no properties set
	const int GH_INVISIBLE_COMBO = 1; // Min: 1, Max: 65279

	// Always read script name and combo from the enemy's name,
	// freeing up attributes 11 and 12
	const int __GH_ALWAYS_USE_NAME = 0;
	*/

	// End standard settings -------------------------------------------------------



	// Advanced settings -----------------------------------------------------------

	// AutoGhost will read a script name from the enemy's name if attribute 12
	// is set to this. Must be a negative number.
	const int AUTOGHOST_READ_NAME = -1;

	// When reading a script from the enemy name, this character marks the
	// beginning of the script name.
	// Default: 64 ( @ )
	const int AUTOGHOST_DELIMITER = 64;

	// Misc. attribute 11 can be set to this instead of GH_INVISIBLE_COMBO.
	// Must be a negative number.
	const int __GH_INVISIBLE_ALT = -1;

	// This will use the invisible combo, but also set npc->Extend to 3 or 4,
	// hiding the initial spawn puff. Must be a negative number.
	const int __GH_INVISIBLE_EXTEND = -2;

	// If enabled, the FFC will be invisible, and Screen->DrawCombo will be used
	// to display enemies.
	const int __GH_USE_DRAWCOMBO = 1;

	// Enemies flash or flicker for this many frames when hit. This does not
	// affect enemies that use the invisible combo.
	// Default: 32
	const int __GH_FLASH_TIME = 32;

	// Enemies will be knocked back for this many frames when hit.
	// Default: 16
	// Max: 4095
	const int __GH_KNOCKBACK_TIME = 16;

	// The speed at which enemies are knocked back, in pixels per frame.
	// Default: 4
	const int __GH_KNOCKBACK_STEP = 4;

	// The imprecision setting used when a movement function is called internally
	// (except for walking functions).
	const int __GH_DEFAULT_IMPRECISION = 2;

	// Whether to set ffc->Link=0 when cleaning up an FFC. In 2.50.3 RC1 and before,
	// this does not work due to a bug. Set this to 1 only if you're using a newer
	// ZC version than 2.50.3 RC1.
	const int __GH_CLEAR_FFC_LINK = 0;

	// For ZC Versions where Animation Style (None) does not set ->Tile, enable this. 
	const int __GH_FIX_255_ANONE = 1;

	// Set to 1 to make ghost ffcs Ethereal so that they cannot block
	// other combo types/flags on the screen.
	// Added in 2.8.12. The prior versions did not have this.
	// Set to 0 if this causes bugs in legacy quests or scripts.
	const int __GH_ETHEREAL = 1;

	// If set to 1, weapons in sideview will die when they hit
	// a solid sideview platform.
	// Set to 0 if this causes bugs in legacy quests or scripts.
	const int __GH_WEAPONS_HIT_PLATFORMS = 1;

	// If set to 1, this will patch bugs where falling weapons can
	// be inappropriately destroyed because of their position.
	// Set to 0 if this causes bugs in legacy quests or scripts.
	const int __GH_FIX_EWM_FALL = 1;

	// If set to 1, this will patch bugs where thrown weapons can
	// be inappropriately destroyed because of their position.
	// Set to 0 if this causes bugs in legacy quests or scripts.
	const int __GH_FIX_EWM_THROW = 1;

	// npc->Misc[] index
	// Set this so it doesn't conflict with other scripts. Legal values are 0-15.
	const int __GHI_NPC_DATA = 15;

	// eweapon->Misc[] indices
	// These must be unique numbers between 0 and 15.
	const int __EWI_FLAGS          = 15; // Every index but this one can be used by non-ghost.zh EWeapons
	const int __EWI_ID             = 3;
	const int __EWI_XPOS           = 4;
	const int __EWI_YPOS           = 5;
	const int __EWI_WORK           = 6;
	const int __EWI_WORK_2         = 7; // Only used by a few movement types
	const int __EWI_MOVEMENT       = 8;
	const int __EWI_MOVEMENT_ARG   = 9;
	const int __EWI_MOVEMENT_ARG_2 = 10;
	const int __EWI_LIFESPAN       = 11;
	const int __EWI_LIFESPAN_ARG   = 12;
	const int __EWI_ON_DEATH       = 13;
	const int __EWI_ON_DEATH_ARG   = 14;

	// These are only used by dummy EWeapons;
	// they can use the same values as __EWI_XPOS and __EWI_YPOS
	const int __EWI_DUMMY_SOUND    = 2;
	const int __EWI_DUMMY_STEP     = 4;
	const int __EWI_DUMMY_SPRITE   = 5;

	// Returns true if the given combo should be considered a pit.
	bool __IsPit(int combo)
	{
	    return IsPit(combo); // std.zh implementation by default
	}

	// Returns true if enemies are visible on screens with the
	// "All Enemies Are Invisible" flag enabled
	bool __HaveAmulet()
	{
	    if ( Link->Item[I_AMULET1] )
	    {
		return true;
	    }
	    if ( Link->Item[I_AMULET2] )
	    {
		return true;
	    }
	    return false;
	}

	//Used to determine if a weapon hit a platform in sideview.
	bool ghost2__OnSidePlatform(int x, int y, int xOff, int yOff, int h, int w) 
	{
		for(int i = 0; i <= (w-1); ++i)
		{
			if( Screen->isSolid( (x + xOff + i), (y + yOff) + h ) )
			{
				if( (Screen->Flags[SF_ROOMTYPE]&4) )
				{
					return true;
				}
			}
		   
		}
		return false;
	}

	// End advanced settings -------------------------------------------------------

}
#include "ghost_zh/2.9/ghost2_common.zh"
#include "ghost_zh/2.9/ghost2_deprecated.zh"
#include "ghost_zh/2.9/ghost2_drawing.zh"
#include "ghost_zh/2.9/ghost2_eweapon.zh"
#include "ghost_zh/2.9/ghost2_eweaponDeath.zh"
#include "ghost_zh/2.9/ghost2_eweaponMovement.zh"
#include "ghost_zh/2.9/ghost2_flags.zh"
#include "ghost_zh/2.9/ghost2_global.zh"
#include "ghost_zh/2.9/ghost2_init.zh"
#include "ghost_zh/2.9/ghost2_modification.zh"
#include "ghost_zh/2.9/ghost2_movement.zh"
#include "ghost_zh/2.9/ghost2_other.zh"
#include "ghost_zh/2.9/ghost2_update.zh"

#include "ghost_zh/2.9/ghost2_scripts.zs"



