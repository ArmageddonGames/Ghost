// ghost.zh
// Version 3.0.0 - Alpha 2
namespace ghost3
{
	typedef const int DEFINE;
	typedef const int CONFIG;
	typedef const bool CONFIGB;
	
	// Used for DrawGhostFFCs()
	const int GHI_DRAW_COMBO      = 0;
	const int GHI_DRAW_CSET       = 1;
	const int GHI_DRAW_X          = 2;
	const int GHI_DRAW_Y          = 3;
	const int GHI_DRAW_WIDTH      = 4;
	const int GHI_DRAW_HEIGHT     = 5;
	const int GHI_DRAW_ADDITIONAL = 6;
	const int GHI_DRAW_LAYER      = 7;
	const int GHI_DRAW_OPACITY    = 8;
	const int GHI_DRAW_ARRAY_SIZE = 9;

	// __Ghost_AdditionalCombos indices
	const int GHI_AC_COUNT             = 0;
	const int GHI_AC_DATA              = 1;

	// __Ghost_AdditionalCombos data offsets
	const int GH_AC_COMBO             = 0; // 1, 7, 13, 19
	const int GH_AC_X                 = 1; // 2, 8, 14, 20
	const int GH_AC_Y                 = 2; // 3, 9, 15, 21
	const int GH_AC_WIDTH             = 3; // 4, 10, 16, 22
	const int GH_AC_HEIGHT            = 4; // 5, 11, 17, 23
	const int GH_AC_ROTATION          = 5; // 6, 12, 18, 24

	// Changing these requires changing the size of __Ghost_AdditionalCombos and
	// several arrays in Ghost_WaitframeLight()
	const int GH_AC_MAX_ADDITIONAL_COMBOS = 4;
	const int GH_AC_DATA_SIZE = 6; // Number of repeating elements

	// Enemy properties - used with GetEnemyProperty and SetEnemyProperty
	// These must match tempGhostData in Ghost_WaitframeLight
	const int ENPROP_X = 0;
	const int ENPROP_Y = 1;
	const int ENPROP_Z = 2;
	const int ENPROP_JUMP = 3;
	const int ENPROP_DIR = 11;
	const int ENPROP_HP = 20;
	const int ENPROP_CSET = 10;

	// Death animations
	enum Ghost_DeathAnim
	{
		GHD_NONE,
		GHD_EXPLODE,
		GHD_EXPLODE_FLASH,
		GHD_SHRINK
	};


	int ghzhData[8];

	// ghzhData indices
	enum
	{
		GHI_GLOBAL_FLAGS,
		GHI_FLASH_COUNTER,
		GHI_SHADOW_FRAME,
		GHI_SHADOW_TIMER,
		GHI_LARGE_SHADOW_FRAME,
		GHI_LARGE_SHADOW_TIMER,
		GHI_CLOCK_TIMER,
		GHI_PREV_SCREEN
	};

	// Global flags
	DEFINE GHGF_FLICKER = 01b;
	DEFINE GHGF_SUSPEND = 10b;

	// Get a normal direction (a DIR_ constant) from a number outside that range
	int NormalizeDir(int dir)
	{
		// Already normal
		if(dir>=0 && dir<=7)
			return dir;
		
		// 8-15 go clockwise from up to up-left
		if(dir==8)
			return DIR_UP;
		if(dir==9)
			return DIR_RIGHTUP;
		if(dir==10)
			return DIR_RIGHT;
		if(dir==11)
			return DIR_RIGHTDOWN;
		if(dir==12)
			return DIR_DOWN;
		if(dir==13)
			return DIR_LEFTDOWN;
		if(dir==14)
			return DIR_LEFT;
		if(dir==15)
			return DIR_LEFTUP;
		
		// Out of range, probably -1
		return DIR_UP;
	}
}
