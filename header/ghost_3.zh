// ghost.zh
// Version 3.0.0 Alpha 3
// Use this for 2.55, and later versions of ZQuest

// See ghost_zh_docs/index.html for documentation.

#option SHORT_CIRCUIT on
#option BINARY_32BIT off
#option HEADER_GUARD on
#option TRUNCATE_DIVISION_BY_LITERAL_BUG off
#option BOOL_TRUE_RETURN_DECIMAL off
#option TRUE_INT_SIZE on

namespace ghost3
{
	
//! BEGIN: I have copied these to Game->Ghost, these constants need to be updated to use Game->Ghost calls.
	
	//All User Settings
	// Standard settings -----------------------------------------------------------
	// Small (1x1) shadow settings
	const int GH_SHADOW_TILE = 27400;
	const int GH_SHADOW_CSET = 7;
	const int GH_SHADOW_FRAMES = 4;
	const int GH_SHADOW_ANIM_SPEED = 8;
	const int GH_SHADOW_TRANSLUCENT = 1; // 0 = No, 1 = Yes
	const int GH_SHADOW_FLICKER = 0; // 0 = No, 1 = Yes

	// Large (2x2) shadow settings
	// If GH_LARGE_SHADOW_TILE is 0, large shadows will be disabled
	const int GH_LARGE_SHADOW_TILE = 27392; // Top-left corner
	const int GH_LARGE_SHADOW_CSET = 7;
	const int GH_LARGE_SHADOW_FRAMES = 4;
	const int GH_LARGE_SHADOW_ANIM_SPEED = 8;
	const int GH_LARGE_SHADOW_MIN_WIDTH = 3;  // Enemies must be at least this wide
	const int GH_LARGE_SHADOW_MIN_HEIGHT = 3; // and this high to use large shadows

	// AutoGhost settings
	const int AUTOGHOST_MIN_FFC = 1; // Min: 1, Max: 32
	const int AUTOGHOST_MAX_FFC = 32; // Min: 1, Max: 32
	const int AUTOGHOST_MIN_ENEMY_ID = 20; // Min: 20, Max: 511
	const int AUTOGHOST_MAX_ENEMY_ID = 511; // Min: 20, Max: 511

	// Other settings
	const int GH_SPAWN_SPRITE = 22; // Min: 0, Max: 255, Default: 22
	const int GH_FAKE_Z = 0; // 0 = No, 1 = Yes
	const int GH_FAKE_EWEAPON_Z = 0; // 0 = No, 1 = Yes
	const int GH_ENEMIES_FLICKER = 0; // 0 = No, 1 = Yes
	const int GH_PREFER_GHOST_ZH_SHADOWS = 0; // 0 = No, 1 = Yes

	// Invisible combo with no properties set
	const int GH_INVISIBLE_COMBO = 1; // Min: 1, Max: 65279

	// End standard settings -------------------------------------------------------

//! END

	// Advanced settings -----------------------------------------------------------

//! BEGIN: Moving these two to tileset init

	// For ZC Versions where Animation Style (None) does not set ->Tile, enable this. 
	const int GH_FIX_255_ANONE = 1;

	// If set to 1, weapons in sideview will die when they hit
	// a solid sideview platform.
	// Set to 0 if this causes bugs in legacy quests or scripts.
	const int GH_WEAPONS_HIT_PLATFORMS = 1;
	
//! END


//! BEGIN: These all seem to be autoghost. We need to decide if any of these will still be used
//       and if so, move them onto settings combos. 

	// AutoGhost will read a script name from the enemy's name if attribute 12
	// is set to this. Must be a negative number.
	const int AUTOGHOST_READ_NAME = -1;

	// When reading a script from the enemy name, this character marks the
	// beginning of the script name.
	// Default: 64 ( @ )
	const int AUTOGHOST_DELIMITER = 64;

	// Misc. attribute 11 can be set to this instead of GH_INVISIBLE_COMBO.
	// Must be a negative number.
	const int GH_INVISIBLE_ALT = -1;

	// This will use the invisible combo, but also set npc->Extend to 3 or 4,
	// hiding the initial spawn puff. Must be a negative number.
	const int GH_INVISIBLE_EXTEND = -2;

	// If enabled, the FFC will be invisible, and Screen->DrawCombo will be used
	// to display enemies.
	const int GH_USE_DRAWCOMBO = 1;
	
// ! END


//! BEGIN: These seem to be things that should be handled in script. 

	// Enemies flash or flicker for this many frames when hit. This does not
	// affect enemies that use the invisible combo.
	// Default: 32
	const int GH_FLASH_TIME = 32;

	// Enemies will be knocked back for this many frames when hit.
	// Default: 16
	// Max: 4095
	const int GH_KNOCKBACK_TIME = 16;

	// The speed at which enemies are knocked back, in pixels per frame.
	// Default: 4
	const int GH_KNOCKBACK_STEP = 4;

	// The imprecision setting used when a movement function is called internally
	// (except for walking functions).
	const int GH_DEFAULT_IMPRECISION = 2;
	
// ! END
	
	
	
//! BEGIN: These BUGFIX settings should be removed and be the default behaviour in 3.0.

	// Whether to set ffc->Link=0 when cleaning up an FFC. In 2.50.3 RC1 and before,
	// this does not work due to a bug. Set this to 1 only if you're using a newer
	// ZC version than 2.50.3 RC1.
	const int GH_CLEAR_FFC_LINK = 0;
	
	// If set to 1, this will patch bugs where falling weapons can
	// be inappropriately destroyed because of their position.
	// Set to 0 if this causes bugs in legacy quests or scripts.
	const int GH_FIX_EWM_FALL = 1;

	// If set to 1, this will patch bugs where thrown weapons can
	// be inappropriately destroyed because of their position.
	// Set to 0 if this causes bugs in legacy quests or scripts.
	const int GH_FIX_EWM_THROW = 1;
	
	// Set to 1 to make ghost ffcs Ethereal so that they cannot block
	// other combo types/flags on the screen.
	// Added in 2.8.12. The prior versions did not have this.
	// Set to 0 if this causes bugs in legacy quests or scripts.
	const int GH_ETHEREAL = 1;

//! END

	// npc->Misc[] index
	// Set this so it doesn't conflict with other scripts. Legal values are 0-15.
	const int GHI_NPC_DATA = 15;

	// Returns true if enemies are visible on screens with the
	// "All Enemies Are Invisible" flag enabled
	bool HaveAmulet()
	{
	    if ( Link->Item[I_AMULET1] )
	    {
		return true;
	    }
	    if ( Link->Item[I_AMULET2] )
	    {
		return true;
	    }
	    return false;
	}

	//Used to determine if a weapon hit a platform in sideview.
	bool OnSidePlatform(int x, int y, int xOff, int yOff, int h, int w) 
	{
		unless (IsSideview()) return false;
		for(int i = 0; i <= (w-1); ++i)
		{
			if( Screen->isSolid( (x + xOff + i), (y + yOff) + h ) )
			{
				return true;
			}
		   
		}
		return false;
	}
	
	combodata GetSettingsCombo()
	{
		int cd = Game->GetCombo("GHOST");
		if(cd) return Game->LoadComboData(cd);
		else 
		{
			printf("No combo has the label GHOST.\n");
			return NULL;
		}
		return Game->Ghost[GHV_SETTINGS_COMBO];
	}
	int GetInvisibleComboID()
	{
		return Game->Ghost[GHV_SETTINGS_COMBO_ID];
	}
	int GetInvisibleComboTile()
	{
		return Game->Ghost[GHV_BLANK_TILE];
	}
	
	enum InitTypes
	{
		INIT_FAIL, INIT_SUCCESS, INIT_ALREADY, INIT_LAST
	};
	
	// Game->Ghost[] Values
	
	enum GhostArrayValues
	{
		//Init
		GHV_INITIALISED, //int: Used to check if ghost was initialised already. Only one bit of this us used.
		
		//Combos	
		GHV_SETTINGS_COMBO, // combodata, Also used for blank combo
		GHV_SETTINGS_COMBO_ID, // int, Also used for blank combo ID
		GHV_BLANK_TILE, // int
		
		//Shadows
		GHV_SHADOW_TILE, //int
		GHV_SHADOW_CSET, //int
		GHV_SHADOW_FRAMES, //int
		GHV_SHADOW_ANIM_SPEED,	//int
		GHV_SHADOW_TRANSLUCENT,	//int
		GHV_SHADOW_FLICKER, //int
		GHV_LARGE_SHADOW_TILE,	//int
		GHV_LARGE_SHADOW_CSET,	//int
		GHV_LARGE_SHADOW_FRAMES, //int
		GHV_LARGE_SHADOW_ANIM_SPEED, //int
		GHV_LARGE_SHADOW_TRANSLUCENT,	//int
		GHV_LARGE_SHADOW_FLICKER, //int
		GHV_LARGE_SHADOW_MIN_WIDTH, //int
		GHV_LARGE_SHADOW_MIN_HEIGHT, //int
		
		//Other settings
		GHV_MIN_FFC, //byte
		GHV_MAX_FFC, //byte
		GHV_SPAWN_SPRITE, //byte
		GHV_FAKE_Z, //flag
		GHV_ENEMIES_FLICKER, //flag
		GHV_PREFER_GHOST_ZH_SHADOWS, //flag
		GHV_FIX_255_ANONE, //flag
		GHV_WEAPONS_HIT_PLATFORMS, //flag
		
		//Legacy
		GHV_FLASH_TIME, //byte
		GHV_KNOCKBACK_TIME, //byte
		GHV_KNOCKBACK_STEP, //byte
		GHV_DEFAULT_IMPRECISION, //byte
		GHV_LEG_AUTOGHOST_READ_NAME,  //int
		GHV_LEG_AUTOGHOST_DELIMITER, //int or byte
		GHV_LEG_INVISIBLE_ALT, //int
		GHV_LEG_INVISIBLE_EXTEND, //int
		GHV_LEG_USE_DRAWCOMBO, //flag
		
		//Bugfix
		GHV_LEG_ETHEREAL, //flag
		GHV_CLEAR_FFC_LINK_DEP, //flag
		GHV_FIX_EWM_FALL_DEP, //flag
		GH_FIX_EWM_THROW_DEP, //flag
		
		GHV_LAST
		
	};
	
	bool initialised()
	{
		return (Game->Ghost[GHV_INITIALISED]&0x1);
	}
	
	int init()
	{
		if ( initialised() ) return INIT_ALREADY;
		unless(RunSetupCombo())
		{
			printf("Ghost.zh Version 3 failed to init as RunSetupCombo() failed to execute.\n");
			return INIT_FAIL;
		}
		unless(SetupShadowTiles())
		{
			printf("Ghost.zh Version 3 failed to init as SetupShadowTiles() failed to execute.\n");
			return INIT_FAIL;
		}
		// More System Values Here. All settings ^^ABOVE^^ to be moved to combodata.
		// so that they are tileset-based!!!
		Game->Ghost[GHV_INITIALISED] |= 0x1;
		return INIT_SUCCESS;
	}
	int RunSetupCombo()
	{
		int cid = Game->GetCombo("GHOST");
		
		unless(cid > 0) 
		{
			printf("No combo has the label GHOST.\n");
			return INIT_FAIL;
		}
		combodata cd = Game->LoadComboData(cid);
		Game->Ghost[GHV_SETTINGS_COMBO] = cd; //cache the combodata
		Game->Ghost[GHV_SETTINGS_COMBO_ID] = cd->ID;
		Game->Ghost[GHV_BLANK_TILE] = cd->OriginalTile; 
		//if ^^this^^ fails, do Game->Ghost[GHV_BLANK_TILE] = GetInvisibleComboTile(Game->Ghost[GHV_BLANK_COMBO]);
		Game->Ghost[GHV_MIN_FFC] = cd->Attribytes[0];
		Game->Ghost[GHV_MAX_FFC] = cd->Attribytes[1];
		Game->Ghost[GHV_SPAWN_SPRITE] = cd->Attribytes[2];
		Game->Ghost[GHV_FAKE_Z] = (cd->UserFlags&0x1) ? 1 : 0;
		Game->Ghost[GHV_ENEMIES_FLICKER] = (cd->UserFlags&0x2) ? 1 : 0;
		Game->Ghost[GHV_PREFER_GHOST_ZH_SHADOWS] = (cd->UserFlags&0x4) ? 1 : 0;
		Game->Ghost[GHV_FIX_255_ANONE] = (cd->UserFlags&0x8) ? 1 : 0;
		Game->Ghost[GHV_WEAPONS_HIT_PLATFORMS] = (cd->UserFlags&0x10) ? 1 : 0;
		return 1;
		Game->Ghost[GHV_FIX_255_ANONE] = (cd->UserFlags&0x8) ? 0 : 1; //default on
		Game->Ghost[GHV_WEAPONS_HIT_PLATFORMS] = (cd->UserFlags&0x10) ? 0 : 1; //default on
		return INIT_SUCCESS;
	}
	// Used for old ffc setup. Will be in 2.9, so I am putting it here for now so that I do not forget it int he 2.9 refactor.
	// Please do not delete this. -Z
	int RunLegacySetup()
	{
		int cid = Game->GetCombo("GHFFC");
		unless(cid > 0)
		{	
			printf("No combo has the label GHFFC\n");
			return INIT_FAIL;
		}
		combodata leg = Game->LoadComboData(cid);
		Game->Ghost[GHV_FLASH_TIME] = leg->Attribytes[0];
		Game->Ghost[GHV_KNOCKBACK_TIME] = leg->Attribytes[1];
		Game->Ghost[GHV_KNOCKBACK_STEP] = leg->Attribytes[2];
		Game->Ghost[GHV_DEFAULT_IMPRECISION] = leg->Attribytes[3];
		Game->Ghost[GHV_LEG_AUTOGHOST_READ_NAME] = leg->Attributes[0];
		Game->Ghost[GHV_LEG_AUTOGHOST_DELIMITER] = leg->Attributes[1];
		Game->Ghost[GHV_LEG_INVISIBLE_ALT] = leg->Attributes[2];
		Game->Ghost[GHV_LEG_INVISIBLE_EXTEND] = leg->Attributes[3];
		Game->Ghost[GHV_LEG_USE_DRAWCOMBO] = (leg->UserFlags&0x1) ? 1 : 0;
		Game->Ghost[GHV_LEG_USE_DRAWCOMBO] = (leg->UserFlags&0x2) ? 1 : 0;
		return INIT_SUCCESS;
		
	}
	int RunFixesSetup()
	{
		int cid = Game->GetCombo("GHBUGFIX");
		unless(cid > 0)
		{	
			printf("No combo has the label GHBUGFIX\n");
			return INIT_FAIL;
		}
		combodata bfix = Game->LoadComboData(cid);
		Game->Ghost[GHV_LEG_ETHEREAL] = (bfix->UserFlags&0x1) ? 0 : 1; //default on
		Game->Ghost[GHV_CLEAR_FFC_LINK_DEP] = (bfix->UserFlags&0x2) ? 0 : 1; //default on
		Game->Ghost[GHV_FIX_EWM_FALL_DEP] = (bfix->UserFlags&0x4) ? 0 : 1; //default on
		Game->Ghost[GH_FIX_EWM_THROW_DEP] = (bfix->UserFlags&0x8) ? 0 : 1; //default on
		return INIT_SUCCESS;
		
	}
	int SetupShadowTiles()
	{
		combodata shad1, shad2;
		int cid1, cid2;
		cid1 = Game->GetCombo("GHSHAD1");
		cid2 = Game->GetCombo("GHSHAD2");
		unless(cid1 > 0) 
		{
			printf("No combo has the label GHSHAD1.\n");
			return INIT_FAIL;
		}
		unless(cid2 > 0) 
		{
			printf("No combo has the label GHSHAD2.\n");
			return INIT_FAIL;
		}
			
		shad1 = Game->LoadComboData(cid1);
		shad2 = Game->LoadComboData(cid2);
		Game->Ghost[GHV_SHADOW_TILE] = shad1->OriginalTile;
		Game->Ghost[GHV_SHADOW_CSET] = shad1->CSet;
		Game->Ghost[GHV_SHADOW_FRAMES] = shad1->Frames;
		Game->Ghost[GHV_SHADOW_ANIM_SPEED] = shad1->ASpeed;
		Game->Ghost[GHV_SHADOW_TRANSLUCENT] = ((shad1->UserFlags&0x1) ? 1 : 0);
		Game->Ghost[GHV_SHADOW_FLICKER] = ((shad1->UserFlags&0x2) ? 1 : 0);
		
		Game->Ghost[GHV_LARGE_SHADOW_TILE] = shad2->OriginalTile;
		Game->Ghost[GHV_LARGE_SHADOW_CSET] = shad2->CSet;
		Game->Ghost[GHV_LARGE_SHADOW_FRAMES] = shad2->Frames;
		Game->Ghost[GHV_LARGE_SHADOW_ANIM_SPEED] = shad2->ASpeed;
		Game->Ghost[GHV_LARGE_SHADOW_TRANSLUCENT] = ((shad2->UserFlags&0x1) ? 1 : 0);
		Game->Ghost[GHV_LARGE_SHADOW_MIN_WIDTH] = shad2->Attributes[0];
		Game->Ghost[GHV_LARGE_SHADOW_MIN_HEIGHT] = shad2->Attributes[1];
		return INIT_SUCCESS;
	}
}
// End advanced settings -------------------------------------------------------

#include "std.zh"
#include "ghost_zh/3.0/ghost3_common.zh"
#include "ghost_zh/3.0/ghost3_weapons.zh"
#include "ghost_zh/3.0/ghost3_flags.zh"
#include "ghost_zh/3.0/ghost3_modification.zh"
#include "ghost_zh/3.0/ghost3_movement.zh"
#include "ghost_zh/3.0/ghost3_other.zh"
#include "ghost_zh/3.0/ghost3_update.zh"
//#include "ghost_zh/3.0/ghost3_global.zh"


