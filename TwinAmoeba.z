// import "std.zh"
// import "ghost.zh"

// Spawns two invincible slime enemies and jumps back and forth between them.
// Appears on screen 3 in the demo.

const int TWA_CORE_ID=178;
const int TWA_SLIME_ID=179;
const float TWA_JUMP_SPEED=2;

ffc script TwinAmoeba
{
    void run()
    {
        npc ghost;
        npc slime[2];
        int currentSlime;
        
        // Initialize
        ghost=GhostInitWait2(this, TWA_CORE_ID, true, GHF_NO_FALL);
        DrawSpawnAnimation(this, ghost);
        currentSlime=0;
        
        // Create the first slime at the core's position; the second is randomly placed
        slime[0]=Screen->CreateNPC(TWA_SLIME_ID);
        slime[0]->X=ghost->X;
        slime[0]->Y=ghost->Y;
        slime[1]=SpawnNPC(TWA_SLIME_ID);
        
        while(true)
        {
            // If the core just got hit, jump to the other slime
            if(GotHit(ghost))
            {
                SlimeJump(this, ghost, slime[currentSlime], slime[currentSlime^1], true);
                currentSlime^=1; // Switch index between 0 and 1
            }
            // If Link is too close and the other slime is farther, jump over
            else if(Distance(ghost->X, ghost->Y, Link->X, Link->Y)<32)
            {
                if(SlimeJump(this, ghost, slime[currentSlime], slime[currentSlime^1], false))
                    currentSlime^=1;
            }
            
            TwAWaitframe(this, ghost, slime[currentSlime]->X, slime[currentSlime]->Y, 0, slime[0], slime[1]);
        }
    }
    
    
    // Jump from one slime to the other. If not forced, it won't jump if the other slime is
    // closer to Link. Returns true if it jumps, false if not.
    bool SlimeJump(ffc this, npc ghost, npc startSlime, npc destSlime, bool force)
    {
        float xPos=this->X;
        float yPos=this->Y;
        float zPos=0;
        int startX;
        int startY;
        int targetX;
        int targetY;
        float angle;
        float totalDist;
        float currentDist;
        
        // If not forced, see if the destination slime is closer than the starting slime;
        // If so, don't do anything
        if(!force)
        {
            if(Distance(startSlime->X, startSlime->Y, Link->X, Link->Y)>=Distance(destSlime->X, destSlime->Y, Link->X, Link->Y))
                return false;
        }
        
        // Jump
        do
        {
            // Get the current position of the two slimes
            startX=startSlime->X;
            startY=startSlime->Y;
            targetX=destSlime->X;
            targetY=destSlime->Y;
            
            // Move toward one from the other
            angle=Angle(xPos, yPos, targetX, targetY);
            xPos+=VectorX(TWA_JUMP_SPEED, angle);
            yPos+=VectorY(TWA_JUMP_SPEED, angle);
            
            // Set height based on how much of the total distance has been covered
            totalDist=Distance(startX, startY, targetX, targetY);
            currentDist=Distance(xPos, yPos, targetX, targetY);
            zPos=totalDist/2*Sin(currentDist/totalDist*180);
            
            TwAWaitframe(this, ghost, xPos, yPos, zPos, startSlime, destSlime);
        } while(currentDist>1);
        
        return true;
    }
    
    
    void TwAWaitframe(ffc this, npc ghost, int x, int y, int z, npc slime1, npc slime2)
    {
        // If the core is dead, kill the slimes as well
        if(!GhostWaitframeM(this, ghost, x, y, z, true, false))
        {
            slime1->HP=0;
            slime2->HP=0;
            Quit();
        }
    }
}

